dtmc

// Константы модели
const int N = 6;      // Начальное преимущество честной цепочки (число подтверждений)
const int MAX_Z = 10; // Порог, при котором атака считается неуспешной
const double q = 0.3; // Доля вычислительной мощности атакующего
const double p = 1 - q; // Доля вычислительной мощности честных майнеров

module double_spend
    // Переменная z: разница между числом блоков честной цепочки и цепочки атакующего.
    // Значение z = -1 является абсорбирующим состоянием, означающим успех атаки.
    // Значения от 0 до MAX_Z – промежуточные состояния; z = MAX_Z – атака не удалась.
    z : [-1..MAX_Z] init N;
    
    // Если атака уже успешна, остаёмся в состоянии успеха.
    [] z = -1 -> (z' = -1);
    
    // Если достигнут порог неуспеха, остаёмся в этом состоянии.
    [] z = MAX_Z -> (z' = MAX_Z);
    
    // Переходы для промежуточных состояний:
    // При нахождении блока атакующим (с вероятностью q) значение z уменьшается на 1.
    // При нахождении блока честными майнерами (с вероятностью p) значение z увеличивается на 1,
    // но не превышает MAX_Z.
    [] z >= 0 & z < MAX_Z -> q : (z' = z - 1) + p : (z' = min(z + 1, MAX_Z));
endmodule

// Метки для анализа
label "success" = z = -1;
label "fail" = z = MAX_Z;
